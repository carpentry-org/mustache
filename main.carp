(deftype Mustache
  (Str [String])
  ;(Lst [(Array String)]) TODO
  (Lambda [(Fn [String] String)]))

; TODO reduce duplication
(defmodule Mustache
  (hidden copy)
  (hidden Lambda)
  (hidden Str)

  (hidden START-KEY)
  (def START-KEY @"*mustache-start*")
  (hidden END-KEY)
  (def END-KEY @"*mustache-end*")
  (hidden DFLT-START)
  (def DFLT-START (Mustache.Str @"{{"))
  (hidden DFLT-END)
  (def DFLT-END (Mustache.Str @"}}"))

  (private prn)
  (hidden prn)
  (defn prn [m]
    (match @m
      (Mustache.Str s) s
      (Mustache.Lambda _) @"#lambda"))

  (private str)
  (hidden str)
  (defn str [m]
    (match @m
      (Mustache.Str s) s
      (Mustache.Lambda _) @"#lambda"))

  (private bool)
  (hidden bool)
  (defn bool [m]
    (match @m
      (Mustache.Str s) (not (empty? &s))
      (Mustache.Lambda _) true))

  (private escape)
  (hidden escape)
  (defn escape [s]
    (Pattern.substitute #">"
      &(Pattern.substitute #"<"
        &(Pattern.substitute #"&" s "&amp;"  -1)
       "&lt;" -1)
    "&gt;" -1)
  )

  (private start)
  (hidden start)
  (defn start [m]
    (str &(Map.get-with-default m &START-KEY &(Mustache.Str @""))))

  (private end)
  (hidden end)
  (defn end [m]
    (str &(Map.get-with-default m &END-KEY &(Mustache.Str @""))))

  (private pat)
  (hidden pat)
  (defn pat [s m]
    (Pattern.init &(fmt "%s%s%s" &(start m) s &(end m))))

  (private replace-comment)
  (hidden replace-comment)
  (defn replace-comment [s values]
    (Pattern.substitute &(pat "!.*" values) &s "" -1))

  (private replace-delimiter)
  (hidden replace-delimiter)
  (defn replace-delimiter [s values]
    (let-do [ks (Pattern.global-match &(pat "=(.*) +(.*)=" values) &s)]
      (for [i 0 (Array.length &ks)]
        (let-do [start (String.trim (Array.nth (Array.nth &ks i) 0))
                 end (String.trim (Array.nth (Array.nth &ks i) 0))
                 r (pat "=(.*) +(.*)=" values)]
          (Map.put! values &START-KEY &(Mustache.Str start))
          (Map.put! values &END-KEY &(Mustache.Str end))
          (set! s (Pattern.substitute &r &s "" 1))))
      s))

  (private replace-unescaped)
  (hidden replace-unescaped)
  (defn replace-unescaped [s values]
    (let-do [pattern (pat &(format "{([^(%s)]*)}" &(end values)) values)
             ks (Pattern.global-match &pattern &s)]
      (for [i 0 (Array.length &ks)]
        (let [m (Array.nth (Array.nth &ks i) 0)
              e (pat &(format "{%s}" m) values)
              k (String.trim m)
              v (Map.get-with-default values &k &(Mustache.Str @""))]
          (set! s (Pattern.substitute &e &s &(str &v) 1))))
      s))

  (private replace-normal)
  (hidden replace-normal)
  (defn replace-normal [s values]
    (let-do [pattern (pat &(format "([^(%s)]*)" &(end values)) values)
             ks (Pattern.global-match &pattern &s)]
      (for [i 0 (Array.length &ks)]
        (let [m (Array.nth (Array.nth &ks i) 0)
              e (pat m values)
              k (String.trim m)
              v (Map.get-with-default values &k &(Mustache.Str @""))]
          (set! s (Pattern.substitute &e &s &(escape &(str &v)) 1))))
      s))

  (private replace-section)
  (hidden replace-section)
  (defn replace-section [s values]
    (let-do [pattern (pat &(fmt "#([^(%s)]*)" &(end values)) values)
             section-starters (Pattern.global-match &pattern &s)
             indices (Pattern.find-all &pattern &s)]
      (for [i 0 (Array.length &section-starters)]
        (let [inside (Array.nth (Array.nth &section-starters i) 0)
              li (+ 5 (length inside))
              end (pat &(format "/%s" inside) values)
              name (String.trim inside)
              v (Map.get-with-default values &name &(Mustache.Str @""))
              from (String.suffix-string &s (+ li @(Array.nth &indices i)))
              until (Pattern.find &end &from)
              end-index (+ until (+ @(Array.nth &indices i) li))]
          (when (/= -1 until)
            (match v
              (Mustache.Str v)
                (set! s (fmt "%s%s%s"
                  &(String.prefix-string &s @(Array.nth &indices i))
                  (if (empty? &v) "" &(String.prefix-string &from until))
                  &(String.suffix-string &s end-index)))
              (Mustache.Lambda f)
                (set! s (fmt "%s%s%s"
                  &(String.prefix-string &s @(Array.nth &indices i))
                  &(f (String.prefix-string &from until))
                  &(String.suffix-string &s end-index)))))))
      s))

  (private replace-inv-section)
  (hidden replace-inv-section)
  (defn replace-inv-section [s values]
    (let-do [pattern (pat &(format "\\^([^(%s)]*)" &(end values)) values)
             section-starters (Pattern.global-match &pattern &s)
             indices (Pattern.find-all &pattern &s)]
      (for [i 0 (Array.length &section-starters)]
        (let [inside (Array.nth (Array.nth &section-starters i) 0)
              li (+ 5 (length inside))
              end (pat &(format "/%s" inside) values)
              name (String.trim inside)
              v (Map.get-with-default values &name &(Mustache.Str @""))
              from (String.suffix-string &s (+ li @(Array.nth &indices i)))
              until (Pattern.find &end &from)
              end-index (+ until (+ @(Array.nth &indices i) li))]
          (when (/= -1 until)
            (set! s (fmt "%s%s%s"
                  &(String.prefix-string &s @(Array.nth &indices i))
                  &(if (bool &v) @"" (String.prefix-string &from until))
                  &(String.suffix-string &s end-index))))))
      s))

  (private replace-partial)
  (hidden replace-partial)
  (defn replace-partial [s values]
    (let-do [pattern (pat &(format ">([^(%s)]*)" &(end values)) values)
             ks (Pattern.global-match &pattern &s)]
      (for [i 0 (Array.length &ks)]
        (let [m (Array.nth (Array.nth &ks i) 0)
              e (pat &(format ">%s" m) values)
              fname (format "%s.mustache" &(String.trim m))
              contents? (IO.read->EOF &fname)]
          (match contents?
            (Result.Error _) ()
            (Result.Success contents)
              (set! s (Pattern.substitute &e &s &contents 1)))))
      s))

  (doc template "templates a [Mustache](https://mustache.github.io/)-formatted
string `s` using the map `values`.

The map must be from `String` to `Mustache` (can be either `Str` or `Lambda`).

Example call:

```
(Mustache.template
  \"this is a super {{ adjective }} library\"
  {@\"adjective\" (Mustache.Str @\"cool\")}
)
```

The `Str` constructor represents a simple string body. It is treated as falsy
when it is empty, and truthy otherwise.

The `Lambda` constructor represents a function that gets invoked on the string
body of the section. Check out the section entitled “Lambdas” in the [official
Mustache documentation](http://mustache.github.io/mustache.5.html). It gets
always treated as truthy.

The `Lst` constructor is currently missing, because types cannot be recursive.
Bummer. This will get fixed in a later version of Carp.

All escaped names will be trimmed, i.e. `{{ thing }}` will be looked up as
`\"thing\"` in the map. Furthermore, opening and closing sections need to be
formatted the same, i.e. `{{/thing}}` is not a section close for `{{^ thing }}`.
Please be consistent in your formatting.")
  (defn template [s values]
    (let [v (Map.put
              (Map.put @values &START-KEY &DFLT-START)
              &END-KEY &DFLT-END)]
      (=> @s
          (replace-comment &v)
          (replace-delimiter &v)
          (replace-partial &v)
          (replace-section &v)
          (replace-inv-section &v)
          (replace-unescaped &v)
          (replace-normal &v))))
)
